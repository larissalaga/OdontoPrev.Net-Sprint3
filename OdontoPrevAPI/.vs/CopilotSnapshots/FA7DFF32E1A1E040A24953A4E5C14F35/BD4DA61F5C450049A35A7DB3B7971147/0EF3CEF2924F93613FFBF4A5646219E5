using Microsoft.AspNetCore.Mvc;
using OdontoPrevAPI.Dtos;
using OdontoPrevAPI.Repositories.Interfaces;
using System.Threading.Tasks;
using Swashbuckle.AspNetCore.Annotations;

namespace OdontoPrevAPI.Controllers
{
    /// <summary>
    /// Controlador para gerenciar entidades Paciente.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public class PacienteController : ControllerBase
    {
        private readonly IPacienteRepository _pacienteRepository;

        /// <summary>
        /// Inicializa uma nova instância da classe <see cref="PacienteController"/>.
        /// </summary>
        /// <param name="pacienteRepository">O repositório para entidades Paciente.</param>
        public PacienteController(IPacienteRepository pacienteRepository)
        {
            _pacienteRepository = pacienteRepository;
        }

        /// <summary>
        /// Obtém todas as entidades Paciente.
        /// </summary>
        /// <returns>Uma lista de entidades Paciente.</returns>
        [HttpGet("all")]
        [SwaggerOperation(Summary = "Obtém todas as entidades Paciente", Description = "Retorna uma lista de todas as entidades Paciente.")]
        [SwaggerResponse(200, "Retorna a lista de entidades Paciente")]
        [SwaggerResponse(500, "Nenhum paciente encontrado")]
        public async Task<IActionResult> GetAllPacientes()
        {
            var pacientes = await _pacienteRepository.GetAll();
            return Ok(pacientes);
        }

        /// <summary>
        /// Obtém uma entidade Paciente pelo CPF.
        /// </summary>
        /// <param name="nrCpf">O CPF do Paciente.</param>
        /// <returns>A entidade Paciente.</returns>
        [HttpGet("cpf/{nrCpf}")]
        [SwaggerOperation(Summary = "Obtém uma entidade Paciente pelo CPF", Description = "Retorna uma entidade Paciente pelo seu CPF.")]
        [SwaggerResponse(200, "Retorna a entidade Paciente")]
        [SwaggerResponse(500, "Paciente não encontrado")]
        public async Task<IActionResult> GetPacienteByCpf(string nrCpf)
        {
            // Remove caracteres especiais do CPF
            var sanitizedCpf = System.Text.RegularExpressions.Regex.Replace(nrCpf, "[^0-9]", "");
            var paciente = await _pacienteRepository.GetByNrCpf(sanitizedCpf);
            return Ok(paciente);
        }

        /// <summary>
        /// Obtém uma entidade Paciente pelo ID.
        /// </summary>
        /// <param name="id">O ID do Paciente.</param>
        /// <returns>A entidade Paciente.</returns>
        [HttpGet("id/{id}")]
        [SwaggerOperation(Summary = "Obtém uma entidade Paciente pelo ID", Description = "Retorna uma entidade Paciente pelo seu ID.")]
        [SwaggerResponse(200, "Retorna a entidade Paciente")]
        [SwaggerResponse(500, "Paciente não encontrado")]
        public async Task<IActionResult> GetPacienteById(int id)
        {
            var paciente = await _pacienteRepository.GetById(id);
            return Ok(paciente);
        }

        /// <summary>
        /// Cria uma nova entidade Paciente.
        /// </summary>
        /// <param name="pacienteDto">O DTO do Paciente a ser criado.</param>
        /// <returns>A entidade Paciente criada.</returns>
        [HttpPost("new")]
        [SwaggerOperation(Summary = "Cria uma nova entidade Paciente", Description = "Cria uma nova entidade Paciente.")]
        [SwaggerResponse(201, "Paciente criado com sucesso")]
        [SwaggerResponse(500, "Entrada inválida ou erro interno")]
        public async Task<IActionResult> CreatePaciente([FromBody] PacienteDtos pacienteDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var newPaciente = await _pacienteRepository.Create(pacienteDto);
            newPaciente.NrCpf = System.Text.RegularExpressions.Regex.Replace(newPaciente.NrCpf, "[^0-9]", "");
            newPaciente.NrTelefone = System.Text.RegularExpressions.Regex.Replace(newPaciente.NrTelefone, "[^0-9]", "");

            return CreatedAtAction(nameof(GetPacienteById), new { id = newPaciente.IdPaciente }, newPaciente);
        }
    }
}
